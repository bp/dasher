<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
#region License
//
// Dasher
//
// Copyright 2015-2017 Drew Noakes
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
// More information about this project is available at:
//
//    https://github.com/drewnoakes/dasher
//
#endregion

using System;
using System.Collections.Generic;
using System.Reflection;

// ReSharper disable AssignNullToNotNullAttribute
// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable NonReadonlyMemberInGetHashCode
// ReSharper disable ReturnTypeCanBeEnumerable.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable MemberCanBeProtected.Global

namespace Dasher
{
    // NOTE this file is generated

    /// <summary>
    /// Static helper methods for working with unions.
    /// </summary>
    public static class Union
    {
        /// <summary>
        /// Gets whether <paramref name="type"/> is one of the family of generic union types.
        /// </summary>
        /// <param name="type">The type to inspect.</param>
        /// <returns><c>true</c> if <paramref name="type"/> is a union type, otherwise <c>false</c>.</returns>
        public static bool IsUnionType(Type type)
        {
            return type.FullName.StartsWith("Dasher.Union`", StringComparison.Ordinal)
                && ReferenceEquals(type.GetTypeInfo().Assembly, typeof(Union).GetTypeInfo().Assembly);
        }

        /// <summary>
        /// Gets the member types of the union represented by <paramref name="type"/>.
        /// </summary>
        /// <param name="type">The union type to inspect.</param>
        /// <returns>The list of member types within the union.</returns>
        /// <exception cref="ArgumentException"><paramref name="type"/> is not a union type.</exception>
        public static IReadOnlyList<Type> GetTypes(Type type)
        {
            if (!IsUnionType(type))
                throw new ArgumentException("Must be a union type.", nameof(type));

            return type.GetGenericArguments();
        }
    }
<#
for (var level = 2; level <= 16; level++)
{
    var unionName = $"Union<{(string.Join(", ", Enumerable.Range(1, level).Select(n => $"T{n}")))}>";
    var funcMatchArgs = string.Join(", ", Enumerable.Range(1, level).Select(n => $"Func<T{n}, T> func{n}"));
    var actionMatchArgs = string.Join(", ", Enumerable.Range(1, level).Select(n => $"Action<T{n}> action{n}"));
#>

    /// <summary>
    /// Models a value which may be of one of <#= level #> types.
    /// </summary>
    public abstract class <#= unionName #>
    {
        /// <summary>
        /// Applies the contained value to one of <#= level #> functions, based upon the type.
        /// </summary>
        /// <remarks>
        /// Only one of the provided functions will be invoked.
        /// </remarks>
<# for (var i = 1; i <= level; i++) { #>
        /// <param name="func<#=i#>">A function from <typeparamref name="T<#=i#>"/> to <typeparamref name="T"/>.</param>
<# } #>
        /// <typeparam name="T">The value returned from all functions.</typeparam>
        /// <returns>The result of the invoked function.</returns>
        public abstract T Match<T>(<#=funcMatchArgs#>);

        /// <summary>
        /// Invokes one of <#= level #> actions, based upon the contained member type.
        /// </summary>
        /// <remarks>
        /// Only one of the provided actions will be invoked.
        /// </remarks>
<# for (var i = 1; i <= level; i++) { #>
        /// <param name="action<#=i#>">An action accepting <typeparamref name="T<#=i#>"/>.</param>
<# } #>
        public abstract void Match(<#=actionMatchArgs#>);

        /// <summary>
        /// Gets the contained member as <see cref="object"/>.
        /// </summary>
        public abstract object Value { get; }

        /// <summary>
        /// Gets the contained value's type.
        /// </summary>
        /// <remarks>
        /// This type will be one of the union's generic member types.
        /// </remarks>
        public abstract Type Type { get; }
<# for (var i = 1; i <= level; i++) { #>

        /// <summary>
        /// Instantiates an instance of this union from a value of type <typeparamref name="T<#=i#>"/>.
        /// </summary>
        /// <param name="value">The value of the returned union.</param>
        /// <returns>A union containing <paramref name="value" /> of type <typeparamref name="T<#=i#>"/>.</returns>
        public static <#= unionName #> Create(T<#=i#> value) => new Type<#=i#>(value);
<# } #>

        /// <summary>
        /// Attempts to instantiate an instance of this union from <paramref name="value" />.
        /// </summary>
        /// <remarks>
        /// If the type of <paramref name="value" /> is not one of the union's member types,
        /// instantiation will fail.
        /// </remarks>
        /// <param name="value">The value to attempt instantiation with.</param>
        /// <param name="union">The resulting union if instantiation was successful, otherwise <c>null</c>.</param>
        /// <returns><c>true</c> if instantiation was successful, otherwise <c>false</c>.</returns>
        public static bool TryCreate(object value, out <#= unionName #> union)
        {
<# for (var i = 1; i <= level; i++) { #>
            if (value is T<#=i#>) { union = new Type<#=i#>((T<#=i#>)value); return true; }
<# } #>
            union = null;
            return false;
        }

        private Union() {}
<# for (var i = 1; i <= level; i++) { #>

        /// <summary>
        /// Implicitly converts values of type <typeparamref name="T<#=i#>"/> to an instance of this union.
        /// </summary>
        /// <param name="value">The type to implicitly convert.</param>
        /// <returns>The resulting union value.</returns>
        public static implicit operator <#= unionName #>(T<#=i#> value) => new Type<#=i#>(value);
<# } #>
<# for (var i = 1; i <= level; i++) { #>

        /// <summary>
        /// Attempts to cast the union's inner value to member type <typeparamref name="T<#=i#>"/>.
        /// </summary>
        /// <remarks>
        /// Casting is rarely the best approach. For safety and performance, use one of the <c>Match</c> overloads instead.
        /// </remarks>
        /// <param name="union">The union to cast.</param>
        /// <exception cref="InvalidCastException"><paramref name="union"/> does not contain a value of type <typeparamref name="T<#=i#>"/>.</exception>
        public static explicit operator T<#=i#>(<#= unionName #> union) => (T<#=i#>)union.Value;
<# } #>
<# for (var i = 1; i <= level; i++) { #>

        private sealed class Type<#=i#> : <#= unionName #>
        {
            private T<#=i#> _value;
            public override object Value => _value;
            public override Type Type => typeof(T<#=i#>);
            public Type<#=i#>(T<#=i#> value) { _value = value; }
            public override T Match<T>(<#=funcMatchArgs#>) => func<#=i#>(_value);
            public override void Match(<#=actionMatchArgs#>) => action<#=i#>(_value);
            public override bool Equals(object o) => o is Type<#=i#> ? Equals(((Type<#=i#>)o)._value, _value) : Equals(o, _value);
            public override int GetHashCode() => _value?.GetHashCode() ?? 0;
            public override string ToString() => _value?.ToString();
        }
<# } #>
    }
<# } #>
}