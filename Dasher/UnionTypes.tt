<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
using System;

namespace Dasher
{
	// NOTE this file is generated
<#
for (var level = 2; level <= 16; level++)
{
	var unionName = $"Union<{(string.Join(", ", Enumerable.Range(1, level).Select(n => $"T{n}")))}>";
	var funcMatchArgs = string.Join(", ", Enumerable.Range(1, level).Select(n => $"Func<T{n}, T> func{n}"));
	var actionMatchArgs = string.Join(", ", Enumerable.Range(1, level).Select(n => $"Action<T{n}> action{n}"));
#>

    public abstract class <#= unionName #>
    {
        public abstract T Match<T>(<#=funcMatchArgs#>);
        public abstract void Match(<#=actionMatchArgs#>);
	    public abstract object Value { get; }
        public abstract Type Type { get; }

<# for (var i = 1; i <= level; i++) { #>
        public static <#= unionName #> Create(T<#=i#> value) => new Type<#=i#>(value);
<# } #>

		public static bool TryCreate(object value, out <#= unionName #> union)
		{
<# for (var i = 1; i <= level; i++) { #>
			if (value is T<#=i#>) { union = new Type<#=i#>((T<#=i#>)value); return true; }
<# } #>
			union = null;
			return false;
		}

        private Union() {}

<# for (var i = 1; i <= level; i++) { #>
        public static implicit operator <#= unionName #>(T<#=i#> value) => new Type<#=i#>(value);
<# } #>
<# for (var i = 1; i <= level; i++) { #>

        private sealed class Type<#=i#> : <#= unionName #>
        {
            private T<#=i#> _value;
	        public override object Value => _value;
	        public override Type Type => typeof(T<#=i#>);
            public Type<#=i#>(T<#=i#> value) { _value = value; }
            public override T Match<T>(<#=funcMatchArgs#>) => func<#=i#>(_value);
            public override void Match(<#=actionMatchArgs#>) => action<#=i#>(_value);
            public override bool Equals(object o) => Equals(o, _value);
            public override int GetHashCode() => _value?.GetHashCode() ?? 0;
            public override string ToString() => _value?.ToString();
        }
<# } #>
    }
<# } #>
}